#include <stdlib.h>
#include<stdio.h>
#include<math.h>

#include "mpi.h"

int main( int argc, char** argv ){ 
  
  int x, y, rank, size, source, dest, tag, i; 
  MPI_Status status;
  
  MPI_Init( &argc, &argv );
  MPI_Comm_rank( MPI_COMM_WORLD, &rank ); 
  MPI_Comm_size( MPI_COMM_WORLD, &size );
  
  if( rank != 0 ){ 
    
    x=rank*10;

    if( rank == size-1 )
        dest=0;
    else
        dest=rank+1;
    
    MPI_Recv(&y , 1, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status );
    printf("Proces %d odebral liczbe %d od procesu %d\n", rank, y ,status.MPI_SOURCE );
    
    MPI_Send( &x, 1, MPI_INT, dest , tag, MPI_COMM_WORLD );
    printf("Proces %d wyslal liczbe %d do procesu %d\n", rank, x , dest );

  } else {

    dest=1;
    x=0;

    MPI_Send( &x, 1, MPI_INT, dest  , tag, MPI_COMM_WORLD );
    printf("Proces %d wyslal liczbe %d od procesu %d\n", rank, x , dest );
    
    MPI_Recv(&y , 1, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status );
    printf("Proces %d odebral liczbe %d do procesu %d\n", rank, y ,status.MPI_SOURCE );
  }
  
  MPI_Finalize(); 
  
  return(0);
}

    
